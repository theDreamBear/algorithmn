{
	// Place your codeforces workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"cf-basic": {
		"scope": "cpp",
		"prefix": "cf",
		"body": [
			"#include <algorithm>",
"#include <array>",
"#include <bitset>",
"#include <cassert>",
"#include <chrono>",
"#include <climits>",
"#include <cmath>",
"#include <complex>",
"#include <cstring>",
"#include <functional>",
"#include <iomanip>",
"#include <iostream>",
"#include <map>",
"#include <numeric>",
"#include <queue>",
"#include <random>",
"#include <set>",
"#include <vector>",
"using namespace std;",
"",
"#include <bits/stdc++.h>",
"using namespace std;",
"",
"namespace my_using {",
"    using ull = unsigned long long;",
"    using ll = long long;",
"    using db = long double;  \/\/ or double, if TL is tight",
"    using str = string;      \/\/ yay python!",
"",
"\/\/ pairs",
"    using pi = pair<int, int>;",
"    using pl = pair<ll, ll>;",
"    using pd = pair<db, db>;",
"#define mp make_pair",
"#define f first",
"#define s second",
"",
"#define tcT template <class T",
"#define tcTU tcT, class U",
"\/\/ ^ lol this makes everything look weird but I\"ll try it",
"    tcT > using V = vector<T>;",
"    tcT, size_t SZ > using AR = array<T, SZ>;",
"    using vi = V<int>;",
"    using vb = V<bool>;",
"    using vl = V<ll>;",
"    using vd = V<db>;",
"    using vs = V<str>;",
"    using vpi = V<pi>;",
"    using vpl = V<pl>;",
"    using vpd = V<pd>;",
"",
"\/\/ vectors",
"#define sz(x) int(size(x))",
"#define bg(x) begin(x)",
"#define all(x) bg(x), end(x)",
"#define rall(x) rbegin(x), rend(x)",
"#define sor(x) sort(all(x))",
"#define rsz resize",
"#define ins insert",
"#define pb push_back",
"#define eb emplace_back",
"#define ft front()",
"#define bk back()",
"",
"    using lll = __int128_t;",
"    using ulll = __uint128_t;",
"    using pii = pair<int32_t, int32_t>;",
"    using pll = pair<ll, ll>;",
"    using vll = vector<ll>;",
"    template<class... Ts> using vo = vector<Ts...>;",
"    template<class... Ts> using min_queue = priority_queue<Ts..., vo<Ts...>, greater<>>;",
"    template<class... Ts> using max_queue = priority_queue<Ts...>;",
"    template<class... Ts> using umap = map<Ts...>;",
"    template<class... Ts> using uset = unordered_set<Ts...>;",
"",
"\/\/ loops",
"#define each(a, x) for (auto &a : x)",
"#define irep(n) for (int i = 0; i < (n); ++i)",
"#define irepf1(n) for (int i = 1; i <= (n); ++i)",
"#define jrep(n) for (int j = 0; j < (n); ++j)",
"#define jrepf1(n) for (int j = 1; j <= (n); ++j)",
"#define krep(n) for (int k = 0; k < (n); ++k)",
"#define krepf1(n) for (int k = 1; k <= (n); ++k)",
"#define rep(i, s, e) for (int(i) = (s); (i) < (e); (i)++)",
"#define per(i, s, e) for (int(i) = (s); (i) >= (e); (i)--)",
"#define INF 1000000000000000000",
"#define Banpei 1000000000 \/\/ 問題毎に設定",
"#define Max_V 100000",
"#define mod7 1000000007",
"#define mod9 998244353",
"#define eps 0.00000001",
"",
"",
"#define lb lower_bound",
"#define ub upper_bound",
"",
"    tcT > int lwb(const V<T> &a, const T &b) { return int(lb(all(a), b) - bg(a)); }",
"    tcT > int upb(const V<T> &a, const T &b) { return int(ub(all(a), b) - bg(a)); }",
"    tcT > int eqb(const V<T> &a, const T &b) { return upb(a, b) - lwb(a, b); }",
"}",
"",
"using namespace my_using;",
"",
"namespace my_numeric {",
"    const int MOD = 1e9+7;",
"    const int MX = (int)2e5 + 5;",
"    const ll BIG = 1e18;  \/\/ not too close to LLONG_MAX",
"    const db PI = acos((db)-1);",
"    const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1};  \/\/ for every grid problem!!",
"",
"    mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());",
"    template<class T> T rand(T a, T b) { return uniform_int_distribution<T>(a, b)(rng); }",
"}",
"using namespace my_numeric;",
"",
"",
"template <class T> using pqs = priority_queue<T, vector<T>, greater<T>>;",
"template <class T> using pqg = priority_queue<T, vector<T>>;",
"",
"\/\/ bitwise ops",
"\/\/ also see https:\/\/gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html",
"constexpr int pct(int x) { return __builtin_popcount(x); }  \/\/ # of bits set",
"\/\/ 位宽",
"constexpr int bits(int x) {  \/\/ assert(x >= 0); \/\/ make C++11 compatible until",
"    return x == 0 ? 0 : 31 - __builtin_clz(x);",
"}  \/\/ floor(log2(x))",
"constexpr int p2(int x) { return 1 << x; }",
"constexpr int msk2(int x) { return p2(x) - 1; }",
"\/\/ 除法向上取整",
"ll cdiv(ll a, ll b) {",
"    return a / b + ((a ^ b) > 0 && a % b);",
"}  \/\/ divide a by b rounded up",
"\/\/ 除法向下取整",
"ll fdiv(ll a, ll b) {",
"    return a / b - ((a ^ b) < 0 && a % b);",
"}  \/\/ divide a by b rounded down",
"",
"tcT > bool ckmin(T &a, const T &b) {",
"    return b < a ? a = b, 1 : 0;",
"}  \/\/ set a = min(a,b)",
"tcT > bool ckmax(T &a, const T &b) {",
"    return a < b ? a = b, 1 : 0;",
"}  \/\/ set a = max(a,b)",
"",
"tcT > void remDup(vector<T> &v) {  \/\/ sort and remove duplicates",
"    sort(all(v));",
"    v.erase(unique(all(v)), end(v));",
"}",
"tcTU > void safeErase(T &t, const U &u) {",
"    auto it = t.find(u);",
"    assert(it != end(t));",
"    t.erase(it);",
"}",
"",
"inline namespace IO {",
"#define SFINAE(x, ...)                                                         \\",
"\ttemplate <class, class = void> struct x : std::false_type {};              \\",
"\ttemplate <class T> struct x<T, std::void_t<__VA_ARGS__>> : std::true_type {}",
"",
"    SFINAE(DefaultI, decltype(std::cin >> std::declval<T &>()));",
"    SFINAE(DefaultO, decltype(std::cout << std::declval<T &>()));",
"    SFINAE(IsTuple, typename std::tuple_size<T>::type);",
"    SFINAE(Iterable, decltype(std::begin(std::declval<T>())));",
"",
"    template <auto &is> struct Reader {",
"        template <class T> void Impl(T &t) {",
"            if constexpr (DefaultI<T>::value) is >> t;",
"            else if constexpr (Iterable<T>::value) {",
"                for (auto &x : t) Impl(x);",
"            } else if constexpr (IsTuple<T>::value) {",
"                std::apply([this](auto &...args) { (Impl(args), ...); }, t);",
"            } else static_assert(IsTuple<T>::value, \"No matching type for read\");",
"        }",
"        template <class... Ts> void read(Ts &...ts) { ((Impl(ts)), ...); }",
"    };",
"",
"    template <class... Ts> void re(Ts &...ts) { Reader<cin>{}.read(ts...); }",
"#define def(t, args...)                                                        \\",
"\tt args;                                                                    \\",
"\tre(args);",
"",
"    template <auto &os, bool debug, bool print_nd> struct Writer {",
"        string comma() const { return debug ? \",\" : \"\"; }",
"        template <class T> constexpr char Space(const T &) const {",
"            return print_nd && (Iterable<T>::value or IsTuple<T>::value) ? \"\\n\"",
"                                                                         : \" \";",
"        }",
"        template <class T> void Impl(T const &t) const {",
"            if constexpr (DefaultO<T>::value) os << t;",
"            else if constexpr (Iterable<T>::value) {",
"                if (debug) os << \"{\";",
"                int i = 0;",
"                for (auto &&x : t)",
"                    ((i++) ? (os << comma() << Space(x), Impl(x)) : Impl(x));",
"                if (debug) os << \"}\";",
"            } else if constexpr (IsTuple<T>::value) {",
"                if (debug) os << \"(\";",
"                std::apply(",
"                        [this](auto const &...args) {",
"                            int i = 0;",
"                            (((i++) ? (os << comma() << \" \", Impl(args)) : Impl(args)),",
"                                    ...);",
"                        },",
"                        t);",
"                if (debug) os << \")\";",
"            } else static_assert(IsTuple<T>::value, \"No matching type for print\");",
"        }",
"        template <class T> void ImplWrapper(T const &t) const {",
"            if (debug) os << \"\\033[0;31m\";",
"            Impl(t);",
"            if (debug) os << \"\\033[0m\";",
"        }",
"        template <class... Ts> void print(Ts const &...ts) const {",
"            ((Impl(ts)), ...);",
"        }",
"        template <class F, class... Ts>",
"        void print_with_sep(const std::string &sep, F const &f,",
"                            Ts const &...ts) const {",
"            ImplWrapper(f), ((os << sep, ImplWrapper(ts)), ...), os << \"\\n\";",
"        }",
"        void print_with_sep(const std::string &) const { os << \"\\n\"; }",
"    };",
"",
"    template <class... Ts> void pr(Ts const &...ts) {",
"        Writer<cout, false, true>{}.print(ts...);",
"    }",
"    template <class... Ts> void ps(Ts const &...ts) {",
"        Writer<cout, false, true>{}.print_with_sep(\" \", ts...);",
"    }",
"}  \/\/ namespace IO",
"",
"inline namespace Debug {",
"    template <typename... Args> void err(Args... args) {",
"        Writer<cerr, true, false>{}.print_with_sep(\" | \", args...);",
"    }",
"    template <typename... Args> void errn(Args... args) {",
"        Writer<cerr, true, true>{}.print_with_sep(\" | \", args...);",
"    }",
"",
"    void err_prefix(str func, int line, string args) {",
"        cerr << \"\\033[0;31m\\u001b[1mDEBUG\\033[0m\"",
"             << \" | \"",
"             << \"\\u001b[34m\" << func << \"\\033[0m\"",
"             << \":\"",
"             << \"\\u001b[34m\" << line << \"\\033[0m\"",
"             << \" - \"",
"             << \"[\" << args << \"] = \";",
"    }",
"",
"#ifdef LOCAL",
"    #define dbg(args...) err_prefix(__FUNCTION__, __LINE__, #args), err(args)",
"#define dbgn(args...) err_prefix(__FUNCTION__, __LINE__, #args), errn(args)",
"#else",
"#define dbg(...)",
"#define dbgn(args...)",
"#endif",
"",
"    const auto beg_time = std::chrono::high_resolution_clock::now();",
"\/\/ https:\/\/stackoverflow.com/questions/47980498/accurate-c-c-clock-on-a-multi-core-processor-with-auto-overclock?noredirect=1&lq=1",
"    double time_elapsed() {",
"        return chrono::duration<double>(std::chrono::high_resolution_clock::now() -",
"                                        beg_time)",
"                .count();",
"    }",
"}  \/\/ namespace Debug",
"",
"inline namespace FileIO {",
"    void setIn(str s) { freopen(s.c_str(), \"r\", stdin); }",
"    void setOut(str s) { freopen(s.c_str(), \"w\", stdout); }",
"    void setIO(str s = \"\") {",
"        cin.tie(0)->sync_with_stdio(0);  \/\/ unsync C / C++ I/O streams",
"        cout << fixed << setprecision(12);",
"        \/\/ cin.exceptions(cin.failbit);",
"        \/\/ throws exception when do smth illegal",
"        \/\/ ex. try to read letter into int",
"        if (sz(s)) setIn(s + \".in\"), setOut(s + \".out\");  \/\/ for old USACO",
"    }",
"}  \/\/ namespace FileIO",
"",
"\/\/ radix_sort 函数",
"template<class It,class F,bool DoUnsafeStackAlloc=false>void radix_sort_impl(It begin,It end,F f){const auto n=std::distance(begin,end);using T=std::remove_const_t<std::remove_reference_t<decltype(*std::declval<It>())>>;using SortType=std::invoke_result_t<F,T>;std::unique_ptr<T[]>up=DoUnsafeStackAlloc?nullptr:std::make_unique<T[]>(n);T stack_arr[DoUnsafeStackAlloc?n:1];T*second=DoUnsafeStackAlloc?&stack_arr[0]:up.get();std::array<std::size_t,256>count{};std::uint8_t or_of_all_bytes[sizeof(SortType)]{};std::uint8_t and_of_all_bytes[sizeof(SortType)]{};for(std::size_t i=0;i<sizeof(SortType);++i){or_of_all_bytes[i]=0;and_of_all_bytes[i]=-1;}for(std::ptrdiff_t i=0;i<n;++i){auto tmp=f(begin[i]);for(std::size_t which_byte=0;which_byte<sizeof(SortType);++which_byte){std::uint8_t byte=((std::uint8_t const*)&tmp)[which_byte];or_of_all_bytes[which_byte]|=byte;and_of_all_bytes[which_byte]&=byte;}}bool needs_swap=false;for(std::size_t which_byte=0;which_byte<sizeof(SortType);++which_byte){auto do_iter=[&](auto a,auto b){count.fill(0);for(std::ptrdiff_t i=0;i<n;++i){auto tmp=f(a[i]);if constexpr(std::is_signed_v<SortType>&&std::is_integral_v<SortType>){tmp^=SortType{1}<<(8*sizeof(SortType)-1);}std::uint8_t sort_byte=((std::uint8_t const*)&tmp)[which_byte];++count[sort_byte];}for(std::ptrdiff_t i=1;i<256;++i){count[i]+=count[i-1];}for(std::ptrdiff_t i=n;i-->0;){auto tmp=f(a[i]);if constexpr(std::is_signed_v<SortType>&&std::is_integral_v<SortType>){tmp^=SortType{1}<<(8*sizeof(SortType)-1);}std::uint8_t sort_byte=((std::uint8_t const*)&tmp)[which_byte];b[--count[sort_byte]]=std::move(a[i]);}};if(or_of_all_bytes[which_byte]!=and_of_all_bytes[which_byte]){if(needs_swap){do_iter(second,begin);}else{do_iter(begin,second);}needs_swap=!needs_swap;}}if(needs_swap)std::copy(second,second+n,begin);}template<class It,class F>auto radix_sort(It begin,It end,F&&sort_by,bool do_unsafe_stack_alloc=false){if(do_unsafe_stack_alloc)radix_sort_impl<It,F,true>(begin,end,sort_by);else radix_sort_impl<It,F,false>(begin,end,sort_by);}template<class It>auto radix_sort(It begin,It end,bool do_unsafe_stack_alloc=false){const auto identity_fn=[](auto&&x){return x;};radix_sort(begin,end,identity_fn,do_unsafe_stack_alloc);}",
"",
"",
"void solveA() {",
"    def(ll, n)",
"}",
"",
"int main() {",
"    setIO();",
"    def(ll, tc);",
"    while (tc--) solveA();",
"}"
		],
		"description": "Log output to console"
	}
}